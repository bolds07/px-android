package com.mercadopago.android.px.tracking;

import android.support.annotation.NonNull;
import com.mercadopago.android.px.tracking.internal.utils.TrackingUtil;
import java.util.Map;

/**
 * Implement this interface to manage PX view and event's tracks.
 */
public interface PXTrackingListener {

    /**
     * This method is called when a new view is shown to the user.
     *
     * @param path is the Checkout's path to the view being shown. Paths start with prefixes that are described in
     * {@link com.mercadopago.android.px.tracking.internal.utils.TrackingUtil}, under the key VIEW_PATH.
     * Example: {@link TrackingUtil.View#PATH_EXPRESS_REVIEW_VIEW}
     * @param data Map containing information that the view is showing. It also contains information
     * about errors if the view launched is the Error view.
     * Keys are dynamically generated by mapping models under the package
     * {@link com.mercadopago.android.px.tracking.internal.model} to the map.
     * For example {@link com.mercadopago.android.px.tracking.internal.model.ExpressInstallmentsView}
     */
    void onView(@NonNull final String path, @NonNull final Map<String, ?> data);

    /**
     * This method is called when a new event is launched by the user.
     *
     * @param path is the Checkout's path to the event being performed by the user.
     * Event paths' start with prefixes that are described in
     * {@link com.mercadopago.android.px.tracking.internal.utils.TrackingUtil}, under the key EVENT_PATH.
     * Example: {@link TrackingUtil.Event#EVENT_PATH_ABORT_EXPRESS}
     * @param data Map containing information about the event performed.
     * Keys are dynamically generated by mapping models under the package
     * {@link com.mercadopago.android.px.tracking.internal.model} to the map.
     * For example {@link com.mercadopago.android.px.tracking.internal.model.ExpressConfirmEvent}
     */
    void onEvent(@NonNull final String path, @NonNull final Map<String, ?> data);
}